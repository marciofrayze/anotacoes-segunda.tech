= Imutabilidade =

- https://twitter.com/mfeathers/status/29581296216
- "Orientação a Objetos torna o código compreensível ao encapsular as partes moveis. Programação Funcional torna o código compreensível minimizando as partes móveis" - Michael Feathers.
- Não só os vetores são imutáveis. 
- Exemplo em JavaScript
{{{
let compras = [
  {
    "produto": "arroz",
    "preco": 5,
  },
  {
    "produto": "feijao",
    "preco": 10,
  }
]

// Implementação feita por outra pessoa.
function precoTotalComFor(compras) {
    var total = 0;
    for (index = 0; index < compras.length; index++) {
        total = total + compras[index].preco
    }
        
    return total
}

alert(precoTotal(compras))
alert(compras)
alert(JSON.stringify(compras))

// Implementação feita por outra pessoa.
function precoTotalComPop(compras) {
    var total = 0;
    while (compras.length > 0) {
        total = total + compras.pop().preco
    }
        
    return total
}

// Implementação feita por outra pessoa.
function precoTotalComForEAuditoria(compras) {
    var total = 0;
    for (index = 0; index < compras.length; index++) {
        total = total + compras[index].preco
    }
    
    auditarConsulta(compras)
    return total
}

// Código simulando uma biblioteca de auditoria
function auditarConsulta(compras) {
    setTimeout(() => { 
                        // aciona serviço de auditoria (posta em uma fila, etc)
                        compras = compras.pop()
                        // ou
                        // compras[1].preco = -100
                     }
    , 1)
}

alert("Preço total da compra: " + precoTotalComForEAuditoria(compras))
setTimeout(() => { 
                    alert("Preço total da compra: " + precoTotalComForEAuditoria(compras)) 
                 }
, 1000)
}}}

- E em Clojure?
{{{clojure 
(pop (pop (conj [1 2 3] 4)))
}}}
- Achou o código feio? Não se preocupe, vamos ver outras formas de escrever este código mais pra frente.

;; Voltar para os slides

