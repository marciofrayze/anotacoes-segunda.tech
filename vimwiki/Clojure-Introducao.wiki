== 1. Introdução ==

==== 1.1 Bem-vinda / Por que estudar Clojure/LISP?  ====

==== 1.2: Preparando ambiente  ====
- https://clojure.org/guides/getting_started  
- Adicionando suporte a pt-br indo em Preferences... -> Editor -> Proofreading

==== 1.3: Usando linha de comando  ====
- clj - REPL (Read-Eval-Print-Loop)  
- Olá mundo! (prinln "Olá mundo!")  
- A lenda de que clojure tem muitos parânteses: println("Olá mundo!") tem a mesma quantidade ;)  
- Primeiro símbolo depois do parânteses é sempre o nome da função. Demais é uma lista com os parâmetros desta função.  
- A função println retorna nulo, que em clojure é nil  
- Como fazer 2 + 2? (2 + 2) vai da erro ClassCastException  
- (+ 2 2) - print "O valor de 2+2 é:" (+ 2 2) - infixa  
- E como a gente faz 2 + 3 + 4 ? (+ (+ 2 3) 4) ou (+ 2 3 4)  
- Outras operações: / *  
- Utilizar a função _str_ para concatenar strings.

==== 1.4: Vetores ====
- [1 2 3 4] ["acabaxi" "abobrinha" "limao"]  
- (println [1 2 3 4]) - vírgula é opcional  
- (count [1 2 3 4])  
- (println (count [1 2 3 4]))  
- Podemos misturar tipos: [1 2 3 "limao" "laranja" "abacate"]. Clojure é uma linguagem dinâmica
- "Adicionando" um elemento: (conj [1 2 3] 4)   
- Vetores são imutáveis  
- "Removendo" o último elento: (pop [1 2 3])  
 
- Podemos misturar tipos: [1 2 3 "limao" "laranja" "abacate"]. Clojure é uma linguagem dinâmica
- (println "marcio" "Frayze") ; a função println irá adicionar espaços automaticamente
- (println "marcio" "@" "segunda.tech") ; mas nem sempre queremos ter espaços :(
- (println (str "marcio" "@" "segunda.tech")) ; mas nem sempre queremos ter espaços :(










