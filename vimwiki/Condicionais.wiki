== Condicionais ==

;; É muito parecido com uma função. Na verdade é uma _special form_, mas na prática, pelo menos por enquanto, você pode pensar como sendo uma função mesmo.
{{{clojure
(10 > 20)  ; class java.lang.Long cannot be cast to class clojure.lang.IFn
(> 10 20)  ; false
(< 10 20)  ; true
}}}

- If é uma função e recebe 3 parâmetros.
- Discutir sobre o nome da função:
        - valor-imposto-retido
        - valor-imposto-retido-para-salario
        - calcular-imposto-retido
        - calcular-imposto-retido-para-salario
{{{clojure
(defn imposto-retido
  "Se salario abaixo ou igual a 1000 reais não tem imposto. Acima de 1000 e abaixo de 2000 reais tem 10% de imposto e acima ou igual a 2000, imposto deve ser de 20%."
  [salario]
  (if (< salario 1000)
     0 
     (if (< salario 2000)
       (* salario 0.1)
       (* salario 0.2))))
}}}

- If junto com let:

{{{clojure
(defn imposto-retido
  "Se salario abaixo ou igual a 1000 reais não tem imposto. Acima de 1000 e abaixo de 2000 reais tem 10% de imposto e acima ou igual a 2000, imposto deve ser de 20%."
  [salario]
  (let [imposto-primeira-faixa 0
        imposto-segunda-faixa  0.1
        imposto-terceira-faixa 0.2
        ]
  (if (< salario 1000)
     imposto-primeira-faixa 
     (if (< salario 2000)
       (* salario imposto-segunda-faixa)
       (* salario imposto-terceira-faixa)))))
}}}

- Ao fazer isso conseguimos perceber melhor um padrão, que eventualmente poderia ser refatorado (mas não vamos fazer isso agora).
- Também percebemos que testar essa lógica começa a ser um pouco chato. E se automatizarmos isso? Nas próximas aulas vamos voltar a esse tema (e mostrar como fazer isso usando TDD).

- Retornando diretamente.

{{{clojure
(defn isento-de-imposto?
  [valor]
  (if (< valor 1000)
    true
    false))
}}}

- Explicar que o ? é usado em função _predicate_.

- O parâmetro else é opcional.
 
{{{clojure
(defn isento-de-imposto?
  [valor]
  (if (< valor 1000)
    true))
}}}

(Vamos falar mais sobre isso no próximo vídeo!)

- Mas este caso poderíamos simplificar ainda mais:
        
{{{clojure
(defn sento-de-imposto?
  "Se valor for menor que 1000, não deve pagar imposto"
  [valor]
  (< valor 1000)
}}}

== When ==

Ao contrário do If, possui apenas o bloco true, que é executado por completo caso a condição seja atendida.

{{{clojure
(defn mensagem
  [idade]
  (when (> idade 18)
    (println "Esta expressão será avaliada caso seja true")
    (println "Esta outra expressão também será avaliada caso seja true")
    "maior de idade")) ; retorno caso seja true
}}}
}}}
