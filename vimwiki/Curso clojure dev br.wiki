= Clojure: Introdução à Programação Funcional =

Você está a fim de aprender Clojure e programação funcional?? 

Estou criando uma série de cursos e o primeiro deles já está quase pronto!

Preencha seu e-mail no formulário abaixo para eu saber que você tem interesse e irei te avisar assim que estiver disponível.

incluir_aqui_formulario_inscricao

Ficou na dúvida? Confira abaixo o conteúdo programático só do primeiro curso que estou finalizando.

== Objetivo do primeiro módulo do curso ==

Aprender os fundamentos de programação em Clojure e os conceitos básicos do paradigma funcional.

Ao final do curso você deve ser capaz de:
- implementar programas básicos e executá-los através do REPL e dentro de sua IDE;
- construir suas próprias funções com e sem parâmetros;
- imprimir dados na tela;
- criar condicionais;
- entender o conceito básico de funções de primeira ordem;
- trabalhar com vetores e mapas;
- transformar elementos de vetores e mapas utizando _filter_, _map_ e _reduce_;
- entender como é possível desenvolver softwares usando estruturas de dados imutáveis;
- e criar testes automatizados para validar o funcionamento de suas funções.

== Parte 1: Introdução ==

Objetivos:

Conseguir implementar e executar programas básicos através do REPL/clj e ser capaz de construir suas próprias funções e imprimir textos utilizando a linguagem Clojure.

[[Clojure-Introducao|Introdução]]   

Objetivos:  

- Conhecer a proposta do curso, objetivos, metodologia e ferramentas.
- Conhecer um breve histórico do Lisp.
- Conhecer a os princípios da linguagem Clojure.
- Ser capaz de instalar o Clojure, entrar no REPL (clj) e executar as primeiras linhas de código.
  - Ser capaz de realizar operações matemáticas simples através do REPL.
  - Entender a função _println_.
    - Saber utilizar a função _str_ para concatenar strings.

[[Vetores]]  
- Ser capaz de criar vetores com elementos do mesmo tipo e de tipos diferentes.
- Conseguir contar o número de elementos de um vetor.
- Conseguir incluir um elemento em um vetor.
- Conseguir remover um elemento em um vetor.
- Entender que vetores são imutáveis (persistentes).

[[Criando nossas próprias funções]]  
- Entender a estrutura da uma função (nome / parâmetros / corpo).
- Ser capaz de criar uma função sem parâmetros.
- Ser capaz de criar funções parametrizadas.

== Parte 2: Imutabilidade ==

Objetivos:

Entender a importância e os potenciais benefícios e impactos de se utilizar estruturas de dados imutáveis.

[[Imutabilidade]]
- Entender as diferenças filosoficas entre Programação Funcional e Programação Orientada a Objetos.
- Entender o problema da mutabilidade através de exemplos em JavaScript.
- Entender o impacto da mutabilidade em códigos executados de forma concorrente.

== Parte 3: Funções puras ==

Objetivos:

Entender o que são, como identificar e conhecer as vantagens das funções puras e os motivos de priorizarmos o seu uso em detrimento de funções impuras.

[[Funções puras]]
- Entender o que são funções puras e efeitos colaterais.
- Conseguir identificar funções puras e impuras.
- Compreender que funções puras podem ser executadas paralelamente de forma segura.

== Parte 4: Conhecendo o let ==

Objetivos:

Conhecer o _let_ e entender a importância de extraírmos símbolos e ter noções também de escopo das definições.

[[Binding de símbolos com let]]
- Aprender a fazer um _binding_ de um símbolo para um valor.
- Perceber as vantagens de um código mais limpo quando extraímos constantes e damos nomes para elas através de símbolos.

== Parte 5: Condicionais ==

Objetivos:

Aprender a criar expressões condicinais em duas diversas formas em Clojure e entender o que é uma expressão condicional.

[[Condicionais]]
- Entender a estrutura do _if_.
- Aprender as diferentes formas de se fazer condicionais simples utilizando o _if_.
  - Utilizando _if_ e _else_.
  - Apenas com _if_ sem o _else_.
  - Retornando diretamente um booleano.
- Compreender que o _if_ funciona de forma similar a uma função (embora seja uma _special form_).
- Conhecer o conceito de _predicate_.
- Começar a compreender que o _nil_ pode ser visto como um _falsey_.
- Aprender a criar condicionais usando o _when_.
- Compreender que existem dois tipos de condicionais: _conditional statement_ e _conditional expression_.
 
== Parte 6: Utilizando uma IDE ==

Objetivos:  

Conseguir instalar e configurar a IDE IntelliJ e o plugin Curvice e conhecer os prinpais atalhos e se tornar capaz de navegar pela IDE, incluindo criar novos projetos, escrever códigos e executá-los através do REPL integrado à IDE.

[[Instalando o IntelliJ e o plugin Cursive]]
- Entender as vantagens de se utilizar uma IDE.
- Quais opções temos disponíveis de IDE/Editores.
- Instalar a IDE IntelliJ Community e o plugin Cursive.
- Criar o primeiro projeto pela IDE.
- Abrir o REPL dentro da IDE.
- Carregar as funções do arquivo que está sendo editado.
- Executar uma função dentro do REPL.
- Aprender a consultar o código fonte de outras funções através da IDE.

[[Atalhos do IntelliJ e Cursive]]
- Ser capaz de executar através de atalhos do teclado os comandos que vamos usar com mais frequencia. 
- Entender pra que serve o _Structural edit_ (também conhecido como _paredit_).
- Aprender a desabilitar o _Structurla edit_ quando necessário.

== Parte 7: Introdução aos testes automatizados ==

Objetivos:

Entender a importância de se criar testes, como criá-los utilizando Clojure e noções de TDD (Desenvolvimento Guiado por Testes).

[[Testes Automatizados e Asserts]]
- Entender a importância de automatiazar os testes.
- Criar seus primeiros testes automatizados.
- Compreender para que servem e como utilizar os _asserts_.
- Aprender as noções sobre o processo de Desenvolvimento Guiado por Testes.

== Parte 8: Thuthy e Falsey ==

Objetivos:

Entender que em Clojure existe o tipo boleano (true/false) mas existem muitas ocasiões onde a interepretação do que é _true_ e o que é _false_ é um pouco mais abrangente e nessas situações, ao invés de utilizarmos os termos _true_ e _false_ usando o _thuthy_ e _falsey_.

[[True, False, Thuthy, Falsey]]
- Compreender a relação entre _True_, _False_ e as semelhanças e diferenças com _Thuthy_ e _Falsey_.
- Perceber porque existe o conceito de _Thuthy_ e _Falsey_ em Clojure e como podemos nos beneficiar deles.
- Ser capaz de identificar se trata-se de um _True/False_ ou um _Thuthy/Falsey_.
 
== Parte 9: Conhecendo mais sobre os vetores ==

Objetivos:

Ser capaz de realizar mais operações utilizando vetores e conhecer a ideia da abordagem _wholemeal_ (refeição completa).

[[Mais sobre Vetores]]  
- Relembrar os conceitos de _conj_ e _pop_.
- Conseguir recuperar um elemento que está em uma determinada posição/index.
- Entender as diferenças entre utilizar a função _get_ e o nome do vetor como função.
- Entender os problemas possíveis de _IndexOutOfBoundsException_.
- Ser capaz de atribuir um valor padrão caso elemento que está sendo recuperado não exista.
- Conseguir substituir um elemento de um vetor utilizando a função _assoc_.

[[Wholemeal]]
- Entender que é ótimo podermos acessar elementos de uma estrutura de dados, mas que na maior parte do tempo (no paradigma funcional) queremos trabalhar com uma visão um pouco mais ampla, enchergando e operando sobre a estrutura de dados como um todo.

== Parte 10: Linguagem dinâmica e consulta de tipos ==

Objetivos:

Conhecer as vantagens e desvantagens de Clojure ser uma linguagem dinâmica e ser capaz de consultar os tipos através do REPL.

[[Tipos dos dados]]
- Entender que Clojure é uma linguagem Dinâmica e com inferência de tipos.
- Aprender a consultar os tipos.

== Parte 11: Namespaces, símbolos e funções privadas ==

Objetivos:

Começar a compreender a importância de estruturar o código, separando as funções em arquivos e _namespaces_ diferentes.

[[O que é e como definir um namespace]]
- Entender a importância de separarmos nossas funções em _namespaces_ diferentes.
- Ser capaz de definir um _namespace_.
- Conhecer o tipo _Symbol_.
- Entender as diferenças entre os tipos _Symbol_ e _Keyword_.
- Conseguir importar uma funções de um outro _namespace_.
- Conseguir mudar de _namespace_ no REPL dentro da IDE.

[[Funções privadas]]
- Entender os potenciais problemas de deixar todas as funções como públicas.
- Aprender como criar uma funcões privada.

== Parte 12: Higher order functions ==

Objetivos:

[[Funções de primeira ordem]]

Começar a ter contato com funções de primeira ordem: entender o que são e como criá-las e a sua importância no desenvolvimento de software utilizando o paradigma funcional.

- Compreender que é possível passar a referência de uma função como parâmetro de outra função.
- Entender as vantagens e desvantagens das funções anônimas.
- Aprender a criar funções anônimas (lambda):
  - usando o _fn_.
  - usando # e %, %1, %2...

== Parte 13: Map, Filter, Reduce ==

[[Map Filter Reduce]]

Objetivos:

Ter os primeiros contatos com 3 funções fundamentais para o desenvolvimento de software no paradigma funcional: _map_, _filter_ e _reduce_.

- Compreender que na programação funcional trabalhamos com o conceito de transformação.
- Conseguir perceber as vantagens de solucionar problemas de forma menos imperativa.
- Entender a diferença entre um laço explícito e um implícito.
- Conseguir filtrar os elementos de um vetor de acordo com um predicado.
- Ser capaz de transformar (reduzir) todos os elementos de um vetor em um único dado.
- Conseguir mesclar o uso de maps, filters e reduce.

== Parte 14: Mapas ==

Objetivos:

Conhecer e saber como e quando utilizar uma das principais estruturas de dados do Clojure: os mapas. 

- Compreender as limitações dos vetores.
- Aprender a construir um mapa.
- Conhecer o conceito de _keyword_.
- Compreender porque é interessante usar uma _keyword_ como chave do mapa.
- Entender quando usar um vetor e quando utilizar um mapa.
- Conseguir contar a quantidade de elementos de um mapa.
- Aprender a listar as chaves e os valores de um mapa.
- Conhecer que existem outros tipos, como por exemplo o tipo ValSeq.
- Ser capaz de associar um novo valor em um mapa.
- Ser capaz de atualizar um valor de um mapa (usando _assoc_ e _update_).
- Ser capaz de remover um valor de um mapa (_dessoc_).
 
== Parte 15: Mais sobre os Mapas ==

Objetivos:

Explorar mais a fundo esta que é uma das estruturas de dados mais utilizadas durante o desenvolvimento de softwares quando estamos utilizando a linguagem Clojure.

- Compreender que mapas podem ser complexos e conter vários níveis.
- Conseguir criar e manipular mapas que contenham um vetor como valor de uma de suas chaves.
- Conseguir criar e manipular mapas que contenham um outro mapa como valor de uma de suas chaves.
- Ser capaz de recuperar um elemento do mapa usando:
  - _get_.
  - o mapa como se fosse uma função.
  - e a forma mais comum: invertendo a ordem e usando a chave como se fosse uma função.
- Entender que é perigoso usar a opção de mapa como se fosse uma função já que ela pode ser nula.
- Aprender a obter um elemento do mapa com um valor padrão caso não encontre.
- Aprender a obter um elemento do mapa com um valor padrão caso não encontre.
- Conseguir obter o valor de uma chave que está aninhada dentro de um mapa (:chave1 (:chave2 mapa)).
- Conseguir atualizar o valor de uma chave que está aninhada dentro de um mapa, utilizando _update-in_.
 
== Parte 16: Threading: uma outra forma de encadear funções ==

Objetivos:

Perceber que a composição de muitas funções pode tornar a leitura do código muito complicada e saber aplicar o conceito de _Threading first_ para compor funções de uma forma mais simples.

- Perceber as situações onde a legibilidade do código fica comprometida pelo volume de composições de chamadas de muitas funções.
- Ser capaz de executar composição de funções usando _Threading first_.

== Parte 17: Calculo IMC ==

Objetivos:

Ser capaz de acompanhar o desenvolvimento de um software simples utilizando as técnicos como TDD e REPL Driven Development.

[[Exemplo IMC com Clojure]]
- Conhecer um código de uma funcionalidade real e criada usando TDD e REPL driven development.

== Parte 18: Funções públicas e privadas ==

Objetivos:

Aprender noções de boas práticas de visibilidade das funções e compreender quando uma funções deve ser definida como pública e quando pode ser privada.

- Entender os potencias problemas de deixar todas as funções como públicas.
- Aprender a criar funções privadas.

== Parte 19: Mais sobre mapas, map, filter e reduce: Loja de brinquedos ==

Objetivos:

Ser capaz de acompanhar o desenvolvimento de um outro software explorando mais o uso de estrutura de dados mapa e as funções _map_, _filter_ e _reduce_.

[[Exemplo Calculo preço total da compra em uma loja de brinquedos]]
- Conhecer outro exemplo mais próximo do real: dado uma estrutura de dados com os brinquedos que estamos comprando, queremos calcular o preço total da compra.
- Praticar mais o uso de Threading, trabalhar com mapas e utilizar o filter, map e reduce.

== Parte 20: Conclusões ==

Objetivos:

Conhecer os possíveis caminhos para continuar os estudos da linguagem Clojure e do Paradigma Funcional.

- Conhecer e ser capaz de procurar informações no clojuredocs.org
- Conhecer livros onde pode dar continuidade de seus estudos.

= Sobre o autor =

Meu nome é Marcio Frayze David e sou autor deste curso.
  
Me formei em Ciência da Computação em 2005 e terminei meu mestrado em Engenharia Elétrica
(com ênfase em Inteligência Artificial) em 2009.  

Desenvolvo softwares há mais de uma década. Desde 2009 trabalho como
analista de sistemas no Serviço Federal de Processamento de Dados
(SERPRO), onde ajudo diversas equipes a
implementar soluções para clientes como a Receita Federal do Brasil e
o Departamento Nacional de Trânsito (DENATRAN).  
Embora durante a maior parte do meu trabalho passe desenvolvendo softwares
no *backend*, também desenvolvo *frontends* e aplicativos móveis (para iOS e
Android).
